apply plugin: 'com.android.library'
apply plugin: 'org.greenrobot.greendao' // apply plugin

android {

    lintOptions {
        abortOnError false
    }

    compileSdkVersion 27
    buildToolsVersion '28.0.3'
    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 27

        //设置改jar版本
        buildConfigField "String", JAR_VERSION, SDK_VERSION_NAME_STARPY_SDK
    }
   buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    greendao {
        schemaVersion 1
        daoPackage 'com.starpy.sql'
        targetGenDir 'src/main/java'
    }

}

dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    api project(':libraries-src:StarpyBaseLib')
    api project(':libraries-src:star-pay')
    api project(':Thirdlibrary')
    //    compile 'com.android.support:recyclerview-v7:25.3.1'
    implementation 'org.greenrobot:greendao:3.2.2'
    // add library
    implementation files('libs/sqlcipher.jar')
}


//./gradlew makeJar 出现env: bash\r: No such file or directory的话是由
// 于window生成的工程gradlew文件在mac下换行符有问题


//打包之前，删除以前的文件
task clearJar(type: Delete) {
    delete 'build/libs/'+ getJarName() + '.jar'
}

//打包生成test.jar
task makeLibraryJar(type:org.gradle.api.tasks.bundling.Jar) {
    //指定生成的jar名
    baseName getJarName()

    //去掉不需要打包的目录和文件
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/NOTICE.txt'
    //过滤不需要的class
    exclude "android/"
    exclude "com/google/"
    exclude "com/facebook/"
    exclude "**/**/BuildConfig.class"
    exclude "**/**/BuildConfig\$*.class"
    exclude "**/R.class"
    exclude "**/R\$*.class"

    //从哪里打包class文件,可以指定文件和目录
    from('build/intermediates/javac/release/compileReleaseJavaWithJavac/classes')
    //打包到jar后的目录结构
//    into('./')
}

makeLibraryJar.dependsOn(clearJar,build)

def getJarName(){
    return SDK_VERSION_NAME_STARPY_SDK.replace("\"","")
}
task copyJar(type: Copy) {

    from('build/libs/')

    into('../libs/')
    include(getJarName() + '.jar')
}

copyJar.dependsOn(makeLibraryJar)

task createPySdk(type: Copy) {

    from('build/libs/')

    into('../libs/')
    include(getJarName() + '.jar')
}

createPySdk.dependsOn(makeLibraryJar)